let Joi,User,CustomErrorHandler,bcrypt,JwtService;_924‍.x([["default",()=>_924‍.o]]);_924‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);_924‍.w("../../models",[["User",["User"],function(v){User=v}]]);_924‍.w("../../services/CustomErrorHandler",[["default",["CustomErrorHandler"],function(v){CustomErrorHandler=v}]]);_924‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]);_924‍.w("../../services/JwtService",[["default",["JwtService"],function(v){JwtService=v}]]);






const loginController = {
    async login(req,res,next) {
        //validation
        const loginSchema = Joi.object({
            email: Joi.string().email().required(),
            password: Joi.string().pattern(new RegExp('^[a-zA-Z0-9]{3,30}$')).required()
        });
        
        const { error } = loginSchema.validate(req.body);

        if (error) {
            return next(error);
        }

        try {
            const user = await User.findOne({ email: req.body.email });
            
            
            if (!user) {
                return next(CustomErrorHandler.wrongCredentials());
            }
            //compare password
            const match = await bcrypt.compare(req.body.password, user.password);
            if (!match) {
                return next(CustomErrorHandler.wrongCredentials());
            }
            //token
            
            const access_token = JwtService.sign({ _id: user._id, role: user.role });
            
            return res.json({ access_token });

        } catch (err) {
            return next(err);
        }


    }
};








_924‍.d(loginController);